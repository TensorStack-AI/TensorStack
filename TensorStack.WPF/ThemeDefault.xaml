<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:SystemComponentModel="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter"
    xmlns:WindowsThemes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:WindowsMedia="clr-namespace:System.Windows.Media;assembly=PresentationCore"
    xmlns:WindowsControls="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
    xmlns:Common="clr-namespace:TensorStack.Common;assembly=TensorStack.Common"
    xmlns:CommonControls="clr-namespace:TensorStack.WPF.Controls"
    xmlns:CommonConverters="clr-namespace:TensorStack.WPF.Converters">


    <!--Images-->
    <BitmapImage x:Key="ImageIcon" UriSource="pack://application:,,,/TensorStack.WPF;component/Images/Icon.png" />
    <BitmapImage x:Key="ImageIconLarge" UriSource="pack://application:,,,/TensorStack.WPF;component/Images/Icon-Large.png" />
    <BitmapImage x:Key="ImageTensorstack" UriSource="pack://application:,,,/TensorStack.WPF;component/Images/Tensorstack.png" />
    <BitmapImage x:Key="ImageTensorstackText" UriSource="pack://application:,,,/TensorStack.WPF;component/Images/Tensorstack-Text.png" />
    <BitmapImage x:Key="ImageTensorstackLong" UriSource="pack://application:,,,/TensorStack.WPF;component/Images/Tensorstack-Long.png" />
    <BitmapImage x:Key="ImageTensorstackCubeW" UriSource="pack://application:,,,/TensorStack.WPF;component/Images/Tensorstack-720.png" />
    <BitmapImage x:Key="ImageTensorstackCubeG" UriSource="pack://application:,,,/TensorStack.WPF;component/Images/Tensorstack-720-Gray.png" />

    <!--Fonts-->
    <FontFamily x:Key="FontAwesomeBrands">pack://application:,,,/TensorStack.WPF;component/Fonts/Brands-Regular-400.otf#Font Awesome 6 Brands Regular</FontFamily>
    <FontFamily x:Key="FontAwesomeDuotone">pack://application:,,,/TensorStack.WPF;component/Fonts/Duotone-Solid-900.otf#Font Awesome 6 Duotone Solid</FontFamily>
    <FontFamily x:Key="FontAwesomeLight">pack://application:,,,/TensorStack.WPF;component/Fonts/Light-300.otf#Font Awesome 6 Pro Light</FontFamily>
    <FontFamily x:Key="FontAwesomeRegular">pack://application:,,,/TensorStack.WPF;component/Fonts/Regular-400.otf#Font Awesome 6 Pro Regular</FontFamily>
    <FontFamily x:Key="FontAwesomeSolid">pack://application:,,,/TensorStack.WPF;component/Fonts/Solid-900.otf#Font Awesome 6 Pro Solid</FontFamily>
    <FontFamily x:Key="FontAwesomeThin">pack://application:,,,/TensorStack.WPF;component/Fonts/Thin-100.otf#Font Awesome 6 Pro Thin</FontFamily>
    <FontFamily x:Key="FontAwesomeSharpLight">pack://application:,,,/TensorStack.WPF;component/Fonts/Sharp-Light-300.otf#Font Awesome 6 Sharp Light</FontFamily>
    <FontFamily x:Key="FontAwesomeSharpRegular">pack://application:,,,/TensorStack.WPF;component/Fonts/Sharp-Regular-400.otf#Font Awesome 6 Sharp Regular</FontFamily>
    <FontFamily x:Key="FontAwesomeSharpSolid">pack://application:,,,/TensorStack.WPF;component/Fonts/Sharp-Solid-900.otf#Font Awesome 6 Sharp Solid</FontFamily>
    <FontFamily x:Key="FontAwesomeSharpThin">pack://application:,,,/TensorStack.WPF;component/Fonts/Sharp-Thin-100.otf#Font Awesome 6 Sharp Thin</FontFamily>



    <!--Variables-->
    <System:Boolean x:Key="True">True</System:Boolean>
    <System:Boolean x:Key="False">False</System:Boolean>

    <!--Converters-->
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <CommonConverters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter" />
    <CommonConverters:BooleanToHiddenConverter x:Key="BooleanToHiddenConverter" />
    <CommonConverters:InverseBooleanToHiddenConverter x:Key="InverseBooleanToHiddenConverter" />
    <CommonConverters:NullVisibilityConverter x:Key="NullVisibilityConverter" />
    <CommonConverters:InverseNullVisibilityConverter x:Key="InverseNullVisibilityConverter" />
    <CommonConverters:NullOrEmptyVisibilityConverter x:Key="NullOrEmptyVisibilityConverter" />
    <CommonConverters:InverseNullOrEmptyVisibilityConverter x:Key="InverseNullOrEmptyVisibilityConverter" />
    <CommonConverters:InverseBoolConverter x:Key="InverseBoolConverter" />
    <CommonConverters:NullBoolConverter x:Key="NullBooleanConverter" />
    <CommonConverters:InverseNullBoolConverter x:Key="InverseNullBooleanConverter" />
    <CommonConverters:EnumDescriptionConverter x:Key="EnumDescriptionConverter" />
    <CommonConverters:EnumToVisibilityConverter  x:Key="EnumToVisibilityConverter" />
    <CommonConverters:EnumToHiddenConverter  x:Key="EnumToHiddenConverter" />
    <CommonConverters:InverseEnumToVisibilityConverter  x:Key="InverseEnumToVisibilityConverter" />
    <CommonConverters:InverseEnumToHiddenConverter  x:Key="InverseEnumToHiddenConverter" />
    <CommonConverters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
    <CommonConverters:MinValueConverter x:Key="MinValueConverter" />
    <CommonConverters:MaxValueConverter x:Key="MaxValueConverter" />
    <CommonConverters:StringToUriConverter x:Key="StringToUriConverter" />
    <CommonConverters:StringToIntConverter x:Key="StringToIntConverter" />
    <CommonConverters:EmptyToVisibilityConverter x:Key="EmptyToVisibilityConverter" />
    <CommonConverters:InverseEmptyToVisibilityConverter x:Key="InverseEmptyToVisibilityConverter" />
    <CommonConverters:StringCaseConverter x:Key="StringCaseConverter" />


    <ObjectDataProvider x:Key="Stretch" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="WindowsMedia:Stretch"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ObjectDataProvider x:Key="StretchDirection" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="WindowsControls:StretchDirection"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>


    <ObjectDataProvider x:Key="ResizeMode" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="Common:ResizeMode"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ObjectDataProvider x:Key="TileMode" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="Common:TileMode"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>


    <!--Colors-->
    <Color x:Key="Accent1">#FF0d72ba</Color>
    <Color x:Key="Accent2">#FF74b768</Color>
    <SolidColorBrush x:Key="AccentColour1" Color="#FF0d72ba" />
    <SolidColorBrush x:Key="AccentColour2" Color="#FF74b768" />
    <SolidColorBrush x:Key="InfoColour" Color="#FF2e90d7" />
    <SolidColorBrush x:Key="SuccessColour" Color="#FF8ed781" />
    <SolidColorBrush x:Key="WarningColour" Color="#ffffcc00" />
    <SolidColorBrush x:Key="DangerColour" Color="#fffe2929" />


    <SolidColorBrush x:Key="DefaultForeground" Color="#FFC8C8C8"/>
    <SolidColorBrush x:Key="DefaultBackgroundColor" Color="#FF232323"/>
    <SolidColorBrush x:Key="DefaultBorderColor" Color="#FF343434"/>


    <SolidColorBrush x:Key="WindowBorderColour" Color="#FF343434"/>
    <SolidColorBrush x:Key="WindowTitleColour" Color="#FF242424"/>




    <!-- 12x12 tile; light gray background + two darker squares -->
    <DrawingBrush x:Key="CheckerBrush"
           TileMode="Tile"
           Viewport="0,0,12,12"
           ViewportUnits="Absolute"
           Stretch="None">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="#80F5F5F5" Geometry="M0,0 L12,0 12,12 0,12 Z"/>
                <GeometryDrawing Brush="#80E3E3E3" Geometry="M0,0 L6,0 6,6 0,6 Z"/>
                <GeometryDrawing Brush="#80E3E3E3" Geometry="M6,6 L12,6 12,12 6,12 Z"/>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>





    <!-- Complete DarkTheme Colours -->
    <SolidColorBrush x:Key="TransparentBrush" Color="Transparent"/>

    <SolidColorBrush x:Key="ContainerBackground" Color="#FF272727"/>
    <SolidColorBrush x:Key="ContainerBorder" Color="#FF3F3F3F"/>

    <SolidColorBrush x:Key="BorderMediumColor">#FF888888</SolidColorBrush>

    <SolidColorBrush x:Key="ControlDarkerBackground" Color="#FF2A2A2A"/>
    <SolidColorBrush x:Key="ControlDarkerBorderBrush" Color="#FF2F2F2F"/>
    <SolidColorBrush x:Key="ControlDefaultBackground" Color="#FF2D2D2D"/>
    <SolidColorBrush x:Key="ControlDefaultBorderBrush" Color="#FF323232"/>
    <SolidColorBrush x:Key="ControlBrightDefaultBackground" Color="#FF343434"/>
    <SolidColorBrush x:Key="ControlBrightDefaultBorderBrush" Color="#FF3C3C3C"/>
    <SolidColorBrush x:Key="ControlDisabledBackground" Color="#FF424242"/>
    <SolidColorBrush x:Key="ControlDisabledBorderBrush" Color="#FF464646"/>
    <SolidColorBrush x:Key="ControlMouseOverBackground" Color="#FF3F3F3F"/>
    <SolidColorBrush x:Key="ControlMouseOverBorderBrush" Color="#FF414141"/>
    <SolidColorBrush x:Key="ControlSelectedBackground" Color="#FF323232"/>
    <SolidColorBrush x:Key="ControlSelectedBorderBrush" Color="#FF373737"/>
    <SolidColorBrush x:Key="ControlSelectedMouseOverBackground" Color="#FF3F3F3F"/>
    <SolidColorBrush x:Key="ControlSelectedMouseOverBorderBrush" Color="#FF424242"/>
    <SolidColorBrush x:Key="ControlGlythColour" Color="#FFEBEBEB"/>
    <SolidColorBrush x:Key="ControlMouseOverGlythColour" Color="#FFD7D7D7"/>
    <SolidColorBrush x:Key="ControlSelectedGlythColour" Color="#FFC8C8C8"/>
    <SolidColorBrush x:Key="ControlDisabledGlythColour" Color="#FFA0A0A0"/>


    <!-- Colourful theme  Colours -->
    <SolidColorBrush x:Key="ControlPrimaryColourBackground" Color="#FF2084E8"/>
    <SolidColorBrush x:Key="ControlPrimaryColourBorderBrush" Color="#FF3294E8"/>
    <SolidColorBrush x:Key="ControlBrightPrimaryColourBackground" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ControlBrightPrimaryColourBorderBrush" Color="#FF50A4FA"/>
    <SolidColorBrush x:Key="ControlSelectionHighlightBrush" Color="#FFF4F4F4"/>


    <!--RadioButton-->
    <SolidColorBrush x:Key="RadioButtonBackground" Color="#FF2D2D2D"/>
    <SolidColorBrush x:Key="RadioButtonBorder" Color="#FF323232"/>
    <SolidColorBrush x:Key="RadioButtonGlyph" Color="#FF2084E8"/>
    <SolidColorBrush x:Key="RadioButtonBackgroundMouseOver" Color="#FF3F3F3F"/>
    <SolidColorBrush x:Key="RadioButtonBorderMouseOver" Color="#FF414141"/>
    <SolidColorBrush x:Key="RadioButtonGlyphMouseOver" Color="#FF3294E8"/>
    <SolidColorBrush x:Key="RadioButtonBackgroundPressed" Color="#FF323232"/>
    <SolidColorBrush x:Key="RadioButtonBorderPressed" Color="#FF373737"/>
    <SolidColorBrush x:Key="RadioButtonGlyphPressed" Color="#FF3294E8"/>
    <SolidColorBrush x:Key="RadioButtonBackgroundDisabled" Color="#FF424242"/>
    <SolidColorBrush x:Key="RadioButtonBorderDisabled" Color="#FF464646"/>
    <SolidColorBrush x:Key="RadioButtonGlyphDisabled" Color="#FF707070"/>

    <!--ListBox-->
    <SolidColorBrush x:Key="ListBoxBackground" Color="#FF2D2D2D"/>
    <SolidColorBrush x:Key="ListBoxBorder" Color="#FF323232"/>
    <SolidColorBrush x:Key="ListBoxBackgroundDisabled" Color="#FF424242"/>
    <SolidColorBrush x:Key="ListBoxBorderDisabled" Color="#FF3C3C3C"/>

    <!--ScrollBar-->
    <LinearGradientBrush x:Key="ScrollBarBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF343434" Offset="0.0"/>
        <GradientStop Color="#FF2A2A2A" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ScrollBarBorder" Color="#FF464646"/>
    <SolidColorBrush x:Key="ScrollBarGlyph" Color="#FFF4F4F4"/>
    <LinearGradientBrush x:Key="ScrollBarThumb" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF707070" Offset="0.0"/>
        <GradientStop Color="#FF707070" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ScrollBarBackgroundMouseOver" Color="#FF323232"/>
    <SolidColorBrush x:Key="ScrollBarBorderMouseOver" Color="#FF373737"/>
    <SolidColorBrush x:Key="ScrollBarGlyphMouseOver" Color="#606060"/>
    <SolidColorBrush x:Key="ScrollBarThumbMouseOver" Color="#A6A6A6"/>
    <SolidColorBrush x:Key="ScrollBarBackgroundPressed" Color="#FF343434"/>
    <SolidColorBrush x:Key="ScrollBarBorderPressed" Color="#FF373737"/>
    <SolidColorBrush x:Key="ScrollBarThumbPressed" Color="#606060"/>
    <SolidColorBrush x:Key="ScrollBarGlyphPressed" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="ScrollBarBackgroundDisabled" Color="#FF343434"/>
    <SolidColorBrush x:Key="ScrollBarBorderDisabled" Color="#FF343434"/>
    <SolidColorBrush x:Key="ScrollBarGlyphDisabled" Color="#606060"/>
    <SolidColorBrush x:Key="ScrollBarThumbDisabled" Color="#606060"/>


    <!--GroupBox-->
    <SolidColorBrush x:Key="GroupBoxBorder" Color="#FF414141" />
    <SolidColorBrush x:Key="GroupBoxBorderOuter" Color="#FF323232" />
    <SolidColorBrush x:Key="GroupBoxBorderInner" Color="#FF323232" />
    <SolidColorBrush x:Key="GroupBoxForeground" Color="#FFC8C8C8" />



    <!--ProgressBar-->
    <LinearGradientBrush x:Key="ProgressBarProgress" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF2084E8" Offset="0.0"/>
        <GradientStop Color="#FF3296FA" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF343434" Offset="0.0"/>
        <GradientStop Color="#FF2A2A2A" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ProgressBarBorder" Color="#FF2F2F2F"/>
    <SolidColorBrush x:Key="ProgressBarProgressDisabled" Color="#FF707070"/>
    <SolidColorBrush x:Key="ProgressBarBackgroundDisabled" Color="#FF424242"/>
    <SolidColorBrush x:Key="ProgressBarBorderDisabled" Color="#FF464646"/>



    <!--CheckBox-->
    <SolidColorBrush x:Key="CheckBoxBackground" Color="#FF2D2D2D"/>
    <SolidColorBrush x:Key="CheckBoxBorder" Color="#FF323232"/>
    <SolidColorBrush x:Key="CheckBoxGlyph" Color="#FF2084E8"/>
    <SolidColorBrush x:Key="CheckBoxBackgroundMouseOver" Color="#FF3F3F3F"/>
    <SolidColorBrush x:Key="CheckBoxBorderMouseOver" Color="#FF414141"/>
    <SolidColorBrush x:Key="CheckBoxGlyphMouseOver" Color="#FF3294E8"/>
    <SolidColorBrush x:Key="CheckBoxBackgroundPressed" Color="#FF323232"/>
    <SolidColorBrush x:Key="CheckBoxBorderPressed" Color="#FF373737"/>
    <SolidColorBrush x:Key="CheckBoxGlyphPressed" Color="#FF3294E8"/>
    <SolidColorBrush x:Key="CheckBoxBackgroundDisabled" Color="#FF424242"/>
    <SolidColorBrush x:Key="CheckBoxBorderDisabled" Color="#FF464646"/>
    <SolidColorBrush x:Key="CheckBoxGlyphDisabled" Color="#FF707070"/>



    <!--Button-->
    <LinearGradientBrush x:Key="ButtonBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF212222" Offset="0.0"/>
        <GradientStop Color="#FF2A2A2A" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonForeground" Color="#FFC8C8C8"/>
    <SolidColorBrush x:Key="ButtonBorderBrush" Color="#FF4e4d4d"/>
    <SolidColorBrush x:Key="ButtonBorderDefault" Color="#FF4e4d4d"/>
    <SolidColorBrush x:Key="ButtonBorderMouseOver" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ButtonBackgroundMouseOver" Color="#FF424242"/>
    <SolidColorBrush x:Key="ButtonBorderPressed" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="#FF50A4FA"/>
    <SolidColorBrush x:Key="ButtonBorderDisabled" Color="#FF464646"/>
    <LinearGradientBrush x:Key="ButtonBackgroundDisabled" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF464646" Offset="0.0"/>
        <GradientStop Color="#FF424242" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonForegroundDisabled" Color="#FF414141"/>



    <!--TabItem-->
    <SolidColorBrush x:Key="TabItemForeground" Color="#FFC8C8C8" />
    <LinearGradientBrush x:Key="TabItemBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF343434" Offset="0.0"/>
        <GradientStop Color="#FF2A2A2A" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItemBorder" Color="#FF414141"/>
    <LinearGradientBrush x:Key="TabItemBackgroundMouseOver" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF3F3F3F" Offset="0.0"/>
        <GradientStop Color="#FF3F3F3F" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItemBorderMouseOver" Color="#FF424242"/>
    <SolidColorBrush x:Key="TabItemBackgroundSelected" Color="#FF323232"/>
    <SolidColorBrush x:Key="TabItemBorderSelected" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="TabItemBackgroundDisabled" Color="#FF424242"/>
    <SolidColorBrush x:Key="TabItemBorderDisabled" Color="#FF464646"/>



    <!--ComboBox-->
    <LinearGradientBrush x:Key="ComboBoxBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF343434" Offset="0.0"/>
        <GradientStop Color="#FF2A2A2A" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBoxBorder" Color="#FF414141"/>
    <SolidColorBrush x:Key="ComboBoxGlyph" Color="#FFBFBFBF"/>
    <LinearGradientBrush x:Key="ComboBoxBackgroundMouseOver" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF3F3F3F" Offset="0.0"/>
        <GradientStop Color="#FF3F3F3F" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBoxBorderMouseOver" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ComboBoxGlyphMouseOver" Color="#FFC8C8C8"/>
    <LinearGradientBrush x:Key="ComboBoxBackgroundPressed" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF343434" Offset="0.0"/>
        <GradientStop Color="#FF2A2A2A" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBoxBorderPressed" Color="#FF50A4FA"/>
    <SolidColorBrush x:Key="ComboBoxGlyphPressed" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBoxBackgroundDisabled" Color="#FF424242"/>
    <SolidColorBrush x:Key="ComboBoxBorderDisabled" Color="#FF464646"/>
    <SolidColorBrush x:Key="ComboBoxGlyphDisabled" Color="#FF606060"/>




    <!--ComboBoxItem-->
    <LinearGradientBrush x:Key="ComboBoxItemBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF343434" Offset="0.0"/>
        <GradientStop Color="#FF2A2A2A" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBoxItemForeground" Color="#FFC8C8C8"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderBrush" Color="#FF323232"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderMouseOver" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ComboBoxItemBackgroundMouseOver" Color="#FF424242"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderPressed" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ComboBoxItemBackgroundPressed" Color="#FF50A4FA"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderDisabled" Color="#FF464646"/>
    <SolidColorBrush x:Key="ComboBoxItemBackgroundHover" Color="#FF424242"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderHover" Color="#A826A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItemBackgroundSelected" Color="#FF424242"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderSelected" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ComboBoxItemBackgroundSelectedHover" Color="#FF424242"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderSelectedHover" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ComboBoxItemBackgroundSelectedNoFocus" Color="#FF424242"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderSelectedNoFocus" Color="#FF424242"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderFocus" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="ComboBoxItemBackgroundHoverFocus" Color="#FF424242"/>
    <SolidColorBrush x:Key="ComboBoxItemBorderHoverFocus" Color="#FF26A0DA"/>



    <!--Slider-->
    <LinearGradientBrush x:Key="SliderThumbBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF707070" Offset="0.0"/>
        <GradientStop Color="#FF707070" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="SliderThumbBorder" Color="#FF3C3C3C"/>
    <SolidColorBrush x:Key="SliderThumbForeground" Color="#FFC8C8C8"/>
    <SolidColorBrush x:Key="SliderThumbBackgroundMouseOver" Color="#FF2D2D2D"/>
    <SolidColorBrush x:Key="SliderThumbBorderMouseOver" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="SliderThumbBackgroundPressed" Color="#FF2D2D2D"/>
    <SolidColorBrush x:Key="SliderThumbBorderPressed" Color="#FF3296FA"/>
    <SolidColorBrush x:Key="SliderThumbBackgroundDisabled" Color="#FF424242"/>
    <SolidColorBrush x:Key="SliderThumbBorderDisabled" Color="#FF464646"/>
    <SolidColorBrush x:Key="SliderTrackBackground" Color="#FF2D2D2D"/>
    <SolidColorBrush x:Key="SliderTrackBorder" Color="#FF3C3C3C"/>


    <!--Crop Image Dialog-->
    <SolidColorBrush x:Key="CropFrameBrush" Color="#FF3296FA" />
    <SolidColorBrush x:Key="CropFrameBorder" Color="#FFC8C8C8" />


    <!--FocusVisual-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--OptionMarkFocusVisual-->
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--TextBlock-->
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource DefaultForeground}"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="None"/>
    </Style>


    <!--FieldTextBlock-->
    <Style x:Key="FieldTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="0,3,0,1" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="FontStyle" Value="Italic" />
        <Setter Property="Foreground" Value="{StaticResource DefaultForeground}"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="None"/>
    </Style>


    <!--ToolTip-->
    <Style  TargetType="{x:Type ToolTip}">
        <Setter Property="Padding" Value="10, 4" />
        <Setter Property="Background" Value="{StaticResource ContainerBackground}" />
    </Style>


    <!--TabControl-->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="{StaticResource ContainerBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBrightDefaultBorderBrush}" />
    </Style>


    <!--FontAwesome-->
    <Style TargetType="{x:Type CommonControls:FontAwesome}">
        <Setter Property="Color" Value="{StaticResource DefaultForeground}" />
    </Style>


    <!--GridSplitter-->
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{StaticResource ControlDefaultBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Grid>
                        <Button Padding="0" Margin="0" >
                            <TextBlock Text="⁞" Foreground="{StaticResource DefaultForeground}" />
                        </Button>
                        <Rectangle Fill="#00FFFFFF" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridSplitterHorizontal" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{StaticResource ControlDefaultBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Grid>
                        <Button Padding="0" Margin="0" >
                            <TextBlock  Text="....." Foreground="{StaticResource DefaultForeground}" Margin="0,-11,0,0" />
                        </Button>
                        <Rectangle Fill="#00FFFFFF" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ComboBoxEditableTextBox-->
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ComboBoxToggleButton-->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Background="{StaticResource ComboBoxBackground}" BorderBrush="{StaticResource ComboBoxBorder}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBoxGlyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                         <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                         <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                         <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBoxGlyphMouseOver}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBoxBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBoxBorderMouseOver}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                         <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                         <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                         <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBoxGlyphPressed}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBoxBackgroundPressed}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBoxBorderPressed}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                         <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                         <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                         <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBoxGlyphDisabled}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBoxBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBoxBorderDisabled}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                         <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                         <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                         <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComboBoxEditableTemplate-->
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <WindowsThemes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </WindowsThemes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <Border x:Name="border" Background="{StaticResource ControlDefaultBackground}" Margin="{TemplateBinding BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!--ComboBoxTemplate-->
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <WindowsThemes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="dropDownBorder" Background="{StaticResource ComboBoxBackground}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" >
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </WindowsThemes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!--ComboBox-->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ComboBoxBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBoxBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--EnumComboBox-->
    <Style x:Key="EnumComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Converter={StaticResource EnumDescriptionConverter}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ComboBoxItem-->
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="{StaticResource ComboBoxItemBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBoxItemBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItemBackgroundHover}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItemBorderHover}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItemBackgroundSelected}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItemBorderSelected}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItemBackgroundSelectedHover}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItemBorderSelectedHover}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItemBackgroundSelectedNoFocus}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItemBorderSelectedNoFocus}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItemBorderFocus}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItemBackgroundHoverFocus}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItemBorderHoverFocus}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Button-->
    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderDefault}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundPressed}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderDisabled}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--TransparentButton-->
    <Style x:Key="TransparentButton" TargetType="{x:Type Button}">
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" CornerRadius="0"  Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"></Setter>
                        </Trigger>
                        <Trigger Property="Button.IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#800d72ba"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--RadioButton-->
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RadioButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RadioButtonBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{StaticResource RadioButtonGlyph}" MinWidth="10" MinHeight="10" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButtonBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButtonBorderMouseOver}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButtonGlyphMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButtonBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButtonBorderDisabled}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButtonGlyphDisabled}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButtonBackgroundPressed}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButtonBorderPressed}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButtonGlyphPressed}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ToggleButton-->
    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" SnapsToDevicePixels="true">
                        <Grid>
                            <Rectangle x:Name="indicator" DockPanel.Dock="Bottom" Height="5" Fill="{StaticResource ButtonBorderDefault}" RadiusX="3" RadiusY="3" Margin="6,0,6,3" VerticalAlignment="Bottom"/>
                            <ContentPresenter x:Name="contentPresenter" Opacity="0.7" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderDefault}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderMouseOver}"/>
                            <Setter Property="ContentPresenter.Opacity" TargetName="contentPresenter" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.3" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderDisabled}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonForegroundDisabled}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Rectangle.Fill" TargetName="indicator" Value="{StaticResource AccentColour2}"/>
                            <Setter Property="ContentPresenter.Opacity" TargetName="contentPresenter" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ToggleButton-->
    <Style x:Key="ToggleButtonEmpty" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" SnapsToDevicePixels="true">
                          <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderMouseOver}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.3" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderDisabled}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--RepeatButton-->
    <Style  TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--RepeatButtonTransparent-->
    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z" Fill="{StaticResource SliderThumbBackground}" Stroke="{StaticResource SliderThumbBorder}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundMouseOver}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderMouseOver}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundPressed}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundDisabled}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{StaticResource SliderThumbBackground}" Stroke="{StaticResource SliderThumbBorder}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundMouseOver}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderMouseOver}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundPressed}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundDisabled}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{StaticResource SliderThumbBackground}" Stroke="{StaticResource SliderThumbBorder}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundMouseOver}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderMouseOver}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundPressed}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundDisabled}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                <Border x:Name="TrackBackground" Background="{StaticResource SliderTrackBackground}" BorderBrush="{StaticResource SliderTrackBorder}" BorderThickness="1" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="11"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5z" Fill="{StaticResource SliderThumbBackground}" Stroke="{StaticResource SliderThumbBorder}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundMouseOver}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderMouseOver}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundPressed}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundDisabled}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z" Fill="{StaticResource SliderThumbBackground}" Stroke="{StaticResource SliderThumbBorder}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundMouseOver}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderMouseOver}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundPressed}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundDisabled}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z" Fill="{StaticResource SliderThumbBackground}" Stroke="{StaticResource SliderThumbBorder}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundMouseOver}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderMouseOver}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundPressed}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumbBackgroundDisabled}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumbBorderDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
                <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
                <Border x:Name="TrackBackground" Background="{StaticResource SliderTrackBackground}" BorderBrush="{StaticResource SliderTrackBorder}" BorderThickness="1" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
                    <Canvas Margin="-1,-6">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="11" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalLeft}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalRight}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!--Slider-->
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource SliderThumbForeground}"/>
        <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--ListBox-->
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource ListBoxBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBoxBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBoxBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBoxBorderDisabled}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ScrollBarButton-->
    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border" Background="{StaticResource ScrollBarBackground}" BorderBrush="{StaticResource ScrollBarBorder}" BorderThickness="1" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ScrollBarBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ScrollBarBorderMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ScrollBarBackgroundPressed}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ScrollBarBorderPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ScrollBarBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ScrollBarBorderDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ScrollBarThumbVertical-->
    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBarThumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBarThumbMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBarThumbPressed}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ScrollBarThumbHorizontal-->
    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBarThumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBarThumbMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBarThumbPressed}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ScrollBar-->
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{StaticResource ScrollBarBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ScrollBarBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Row="1"/>
                        <RepeatButton x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                            <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z" Fill="{StaticResource ScrollBarGlyph}" Margin="3,4,3,3" Stretch="Uniform"/>
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{StaticResource ScrollBarButton}">
                            <Path x:Name="ArrowBottom" Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z" Fill="{StaticResource ScrollBarGlyph}" Margin="3,4,3,3" Stretch="Uniform"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{StaticResource ScrollBarGlyphPressed}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{StaticResource ScrollBarGlyphPressed}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{StaticResource ScrollBarGlyphMouseOver}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{StaticResource ScrollBarGlyphMouseOver}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{StaticResource ScrollBarGlyphDisabled}"/>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{StaticResource ScrollBarGlyphDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="BorderThickness" Value="0,1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="1"/>
                                <RepeatButton x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                    <Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" Fill="{StaticResource ScrollBarGlyph}" Margin="3" Stretch="Uniform"/>
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton" Command="{x:Static ScrollBar.LineRightCommand}" Grid.Column="2" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                    <Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" Fill="{StaticResource ScrollBarGlyph}" Margin="3" Stretch="Uniform"/>
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBarGlyphPressed}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBarGlyphPressed}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBarGlyphMouseOver}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBarGlyphMouseOver}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value=".5" />
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBarGlyphDisabled}"/>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBarGlyphDisabled}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--TextBox-->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="2" />
        <Setter Property="Background" Value="{StaticResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource DefaultForeground}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource ControlSelectionHighlightBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ControlPrimaryColourBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ControlPrimaryColourBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{StaticResource ControlSelectionHighlightBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--TextBlockStyle-->
    <Style x:Key="TextBlockStyle" TargetType="{x:Type TextBox}">
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource DefaultForeground}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>


    <!--CheckBox-->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource CheckBoxBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="16" Height="16">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource CheckBoxGlyph}" Margin="2,2,0,0" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource CheckBoxGlyph}" Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="3,1,1,1" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource CheckBoxBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource CheckBoxBorderMouseOver}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource CheckBoxGlyphMouseOver}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource CheckBoxGlyphMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource CheckBoxBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource CheckBoxBorderDisabled}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource CheckBoxGlyphDisabled}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource CheckBoxGlyphDisabled}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource CheckBoxBackgroundPressed}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource CheckBoxBorderPressed}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource CheckBoxGlyphPressed}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource CheckBoxGlyphPressed}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--SwitchBox-->
    <Style x:Key="SwitchBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Padding" Value="4,2,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <SolidColorBrush x:Key="fillBrush" Color="{StaticResource Accent1}"/>
                        <SolidColorBrush x:Key="borderBrush">Gray</SolidColorBrush>
                    </ControlTemplate.Resources>
                    <Grid  Background="Transparent" SnapsToDevicePixels="True"  Height="20" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="36" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid  x:Name="markGrid" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle Fill="Transparent" Height="18" x:Name="moveEllipse"  >
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation From="0" To="16" Duration="0:0:0.1" Storyboard.TargetProperty="Width" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation To="0" Duration="0:0:0.1" Storyboard.TargetProperty="Width"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                            <Rectangle RadiusX="9" RadiusY="9" 
                                 Grid.ColumnSpan="2"
                                 Name="line"
                                 StrokeThickness="1"
                                 IsHitTestVisible="False"
                                 Margin="0">
                                <Rectangle.Style>
                                    <Style TargetType="{x:Type Rectangle}">
                                        <Setter Property="Fill" Value="{StaticResource  ButtonBackgroundDisabled}"/>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                            <Ellipse Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
                               StrokeThickness="0"
                               Name="spot"
                               Grid.Column="1"
                               Margin="1"
                               HorizontalAlignment="Left" >
                                <Ellipse.Style>
                                    <Style TargetType="Ellipse">
                                        <Setter Property="Fill" Value="{StaticResource ButtonBackground}"/>
                                    </Style>
                                </Ellipse.Style>
                            </Ellipse>
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="line" Value="{StaticResource CheckBoxGlyphPressed}"/>
                            <Setter Property="Stroke" TargetName="spot" Value="{StaticResource CheckBoxGlyphPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"  Value=".5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="line" Value="{StaticResource CheckBoxBackgroundDisabled}"/>
                            <Setter Property="Stroke" TargetName="spot" Value="lightGray"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="Required">
                            <Setter Property="Fill" TargetName="line" Value="#80fe2929"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="line" Value="{StaticResource AccentColour2}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Fill" TargetName="line" Value="lightGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--TabItem-->
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Foreground" Value="{StaticResource TabItemForeground}"/>
        <Setter Property="Background" Value="{StaticResource TabItemBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TabItemBorder}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="10,0,10,4"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Margin="0">
                            <Border x:Name="innerBorder" Background="{StaticResource TabItemBackgroundSelected}" BorderBrush="{StaticResource TabItemBorderSelected}" BorderThickness="1,1,1,0" Margin="-1" Opacity="0"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItemBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItemBorderMouseOver}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItemBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItemBorderMouseOver}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItemBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItemBorderMouseOver}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItemBackgroundMouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItemBorderMouseOver}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItemBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItemBorderDisabled}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItemBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItemBorderDisabled}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItemBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItemBorderDisabled}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItemBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItemBorderDisabled}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,0,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,0,4,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,0,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="0,-2,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,0,0,4"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ProgressBar-->
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource ProgressBarProgress}"/>
        <Setter Property="Background" Value="{StaticResource ProgressBarBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ProgressBarProgressDisabled}" />
                            <Setter Property="Background" Value="{StaticResource ProgressBarBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorderDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--GroupBox-->
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Foreground" Value="{StaticResource GroupBoxForeground}" />
        <Setter Property="BorderBrush" Value="{StaticResource GroupBoxBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" Grid.Column="0" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1"/>
                        <Border BorderBrush="{StaticResource GroupBoxBorderOuter}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.RowSpan="2" Grid.Row="0" Opacity=".8">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ContextMenu-->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border" Background="{StaticResource ContainerBackground}" BorderBrush="{StaticResource BorderMediumColor}" BorderThickness="1">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="2" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="34" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="2,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" ContentSource="Icon" />
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"  Margin="1,0,0,0"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="6,2,2,2" DockPanel.Dock="Right" />
                <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="#FF888888" />
                <Popup Name="Popup"
                       Placement="Right"
                       HorizontalOffset="-4"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{StaticResource ContainerBackground}"
                            BorderBrush="{StaticResource BorderMediumColor}"
                            BorderThickness="1">
                        <StackPanel IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#5082a4" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ContainerBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type MenuItem}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--WindowBase-->
    <Style TargetType="{x:Type CommonControls:WindowBase}">
        <Setter Property="Foreground" Value="{StaticResource DefaultForeground}" />
        <Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource DefaultBorderColor}" />
        <Setter Property="BorderThickness" Value="1,2,1,1" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome UseAeroCaptionButtons="False" CaptionHeight="{Binding Path=(SystemParameters.WindowNonClientFrameThickness).Top}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{StaticResource DefaultBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" x:Name="WindowBorder">
                        <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <UniformGrid Columns="3" x:Name="WindowTitlePanel" Height="{Binding Path=(SystemParameters.WindowNonClientFrameThickness).Top}" Background="{TemplateBinding BorderBrush}" Margin="0,-1,0,2">

                                <!--Title-->
                                <DockPanel>
                                    <Image
                                            DockPanel.Dock="Left"
                                            Margin="8,2,0,0"  
                                            Source="{TemplateBinding Icon}"  
                                            Height="{x:Static SystemParameters.SmallIconHeight}"  
                                            Width="{x:Static SystemParameters.SmallIconWidth}"  
                                            VerticalAlignment="Center"  
                                            WindowChrome.IsHitTestVisibleInChrome="True">
                                    </Image>

                                    <ContentControl 
                                            IsTabStop="False"
                                            Margin="5,0,0,0"
                                            FontSize="13"
                                            Opacity=".8"
                                            Foreground="White"
                                            FontWeight="SemiBold"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Title}" />
                                </DockPanel>

                                <!--Center-->
                                <Grid  >

                                </Grid>

                                <!--Window Actions-->
                                <DockPanel x:Name="WindowCommandButtonsPanel" VerticalAlignment="Stretch" Margin="1" >
                                    <UniformGrid DockPanel.Dock="Right" Columns="3"  DataContext="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type CommonControls:WindowBase}}}" WindowChrome.IsHitTestVisibleInChrome="True">
                                        <Button Command="{Binding MinimizeCommand}" Padding="10,1" >
                                            <CommonControls:FontAwesome Icon="&#xf2d1;" />
                                        </Button>
                                        <Grid>
                                            <Button x:Name="RestoreButton" Command="{Binding RestoreCommand}" Padding="10,1">
                                                <CommonControls:FontAwesome Icon="&#xf2d2;" />
                                            </Button>
                                            <Button x:Name="MaximizeButton" Command="{Binding MaximizeCommand}" Padding="10,1">
                                                <CommonControls:FontAwesome Icon="&#xf2d0;" />
                                            </Button>
                                        </Grid>
                                        <Button x:Name="CloseButton" Command="{Binding CloseCommand}" Padding="12,0" >
                                            <CommonControls:FontAwesome Icon="&#xf00d;" />
                                        </Button>
                                    </UniformGrid>

                                    <TextBlock/>
                                </DockPanel>
                            </UniformGrid>

                            <AdornerDecorator Grid.Row="1" KeyboardNavigation.IsTabStop="False">
                                <ContentPresenter Content="{TemplateBinding Content}" KeyboardNavigation.TabNavigation="Cycle" />
                            </AdornerDecorator>
                            <ResizeGrip x:Name="ResizeGrip"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Bottom"
                                        Grid.Row="1"
                                        IsTabStop="False"
                                        Visibility="Hidden"
                                        WindowChrome.ResizeGripDirection="BottomRight" />

                            <!--Dialog Overlay-->
                            <Rectangle  Grid.RowSpan="2"  Fill="#000000" IsHitTestVisible="False" Opacity="0.6" Visibility="{Binding IsDialogVisible, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type CommonControls:WindowBase}}, Converter={StaticResource BooleanToHiddenConverter}, FallbackValue=Hidden}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Visibility" TargetName="MaximizeButton" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="Visibility" TargetName="RestoreButton" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--WindowHeadless-->
    <Style x:Key="WindowHeadless" TargetType="{x:Type CommonControls:WindowBase}">
        <Setter Property="Foreground" Value="{StaticResource DefaultForeground}" />
        <Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource DefaultBorderColor}" />
        <Setter Property="BorderThickness" Value="1,2,1,1" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome UseAeroCaptionButtons="False" CaptionHeight="35" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{StaticResource DefaultBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" x:Name="WindowBorder">
                        <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}">
    
                            <!--Main Content-->
                            <AdornerDecorator KeyboardNavigation.IsTabStop="False">
                                <ContentPresenter Content="{TemplateBinding Content}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </AdornerDecorator>

                            <!--Resize-->
                            <ResizeGrip x:Name="ResizeGrip" 
                                       HorizontalAlignment="Right"
                                       VerticalAlignment="Bottom"
                                       IsTabStop="False"
                                       Visibility="Hidden"
                                       WindowChrome.ResizeGripDirection="BottomRight" />

                            <!--Dialog Overlay-->
                            <Rectangle  Grid.RowSpan="2"  Fill="#000000" IsHitTestVisible="False" Opacity="0.6" Visibility="{Binding IsDialogVisible, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type CommonControls:WindowBase}}, Converter={StaticResource BooleanToHiddenConverter}, FallbackValue=Hidden}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="BorderThickness" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--DialogBase-->
    <Style TargetType="{x:Type CommonControls:DialogControl}">
        <Setter Property="Foreground" Value="{StaticResource DefaultForeground}" />
        <Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource DefaultBorderColor}" />
        <Setter Property="BorderThickness" Value="1,2,1,1" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome UseAeroCaptionButtons="False" CaptionHeight="{Binding Path=(SystemParameters.WindowNonClientFrameThickness).Top}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{StaticResource DefaultBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" x:Name="WindowBorder">
                        <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <UniformGrid Columns="3" x:Name="WindowTitlePanel" Height="{Binding Path=(SystemParameters.WindowNonClientFrameThickness).Top}" Background="{TemplateBinding BorderBrush}" Margin="0,-1,0,2">

                                <!--Title-->
                                <DockPanel>
                                    <Image
                                     DockPanel.Dock="Left"
                                     Margin="8,2,0,0"  
                                     Source="{TemplateBinding Icon}"  
                                     Height="{x:Static SystemParameters.SmallIconHeight}"  
                                     Width="{x:Static SystemParameters.SmallIconWidth}"  
                                     VerticalAlignment="Center"  
                                     WindowChrome.IsHitTestVisibleInChrome="True">
                                    </Image>

                                    <ContentControl 
                                     IsTabStop="False"
                                     Margin="5,0,0,0"
                                     FontSize="13"
                                     Opacity=".8"
                                     Foreground="White"
                                     FontWeight="SemiBold"
                                     HorizontalAlignment="Left"
                                     VerticalAlignment="Center"
                                     Content="{TemplateBinding Title}" />
                                </DockPanel>

                                <!--Center-->
                                <Grid  >

                                </Grid>

                                <!--Window Actions-->
                                <DockPanel x:Name="WindowCommandButtonsPanel" VerticalAlignment="Stretch" Margin="1" DataContext="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type CommonControls:DialogControl}}}" WindowChrome.IsHitTestVisibleInChrome="True">
                                    <Button x:Name="CloseButton" DockPanel.Dock="Right" Command="{Binding CloseCommand}" Padding="12,0" >
                                        <CommonControls:FontAwesome Icon="&#xf00d;" />
                                    </Button>
                                    <TextBlock/>
                                </DockPanel>
                            </UniformGrid>

                            <AdornerDecorator Grid.Row="1" KeyboardNavigation.IsTabStop="False">
                                <ContentPresenter Content="{TemplateBinding Content}" KeyboardNavigation.TabNavigation="Cycle" />
                            </AdornerDecorator>
                            <ResizeGrip x:Name="ResizeGrip"
                                 HorizontalAlignment="Right"
                                 VerticalAlignment="Bottom"
                                 Grid.Row="1"
                                 IsTabStop="False"
                                 Visibility="Hidden"
                                 WindowChrome.ResizeGripDirection="BottomRight" />

                            <!--Dialog Overlay-->
                            <!--<Rectangle Fill="#000000" IsHitTestVisible="False" Opacity="0.6" Visibility="{Binding Tag, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}, Converter={StaticResource BooleanToHiddenConverter}, FallbackValue=Hidden}" />-->
                        </Grid>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--MessageBoxDialog-->
    <Style x:Key="MessageBoxDialogStyle" TargetType="{x:Type CommonControls:DialogControl}" BasedOn="{StaticResource {x:Type CommonControls:DialogControl}}">
        <Setter Property="Foreground" Value="{StaticResource DefaultForeground}" />
        <Setter Property="BorderBrush" Value="{StaticResource  DefaultBorderColor}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding MessageBoxStyle, ElementName=UI}" Value="Success">
                <Setter Property="Foreground" Value="{StaticResource ContainerBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource SuccessColour}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding MessageBoxStyle, ElementName=UI}" Value="Info">
                <Setter Property="Foreground" Value="{StaticResource ContainerBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource InfoColour}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding MessageBoxStyle, ElementName=UI}" Value="Warning">
                <Setter Property="Foreground" Value="{StaticResource ContainerBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource WarningColour}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding MessageBoxStyle, ElementName=UI}" Value="Danger">
                <Setter Property="Foreground" Value="{StaticResource ContainerBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource DangerColour}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>



</ResourceDictionary>